<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"      
 "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<!-- namespace:命名空间，用来区分同名的sql。 id:在同一个文件里面唯一。 parameterType:参数类型。 resultType:返回的结果类型。 
	#{ename}: ename是Emp的属性(mybatis 会利用反射机制读取emp对象的属性值)。 注意： 如果使用Mapper映射器，namespace 
	必须等Mapper接口的完整的名称。 -->
<!-- <select id="getMtypeList" resultType="java.util.HashMap"> -->
<!-- select code,`name` from jk_control_measure -->
<!-- </select> -->
<mapper namespace="com.huawei.it.dao.EmpDao">
	<select id="findAllEmp" resultType="com.huawei.it.entity.Emp">
		SELECT * FROM emp
	</select>
	<!-- 当只传1个参数的时候不能 -->
	<select id="findByDept1" parameterType="java.lang.Integer" resultType="com.huawei.it.entity.Emp">
		select * from emp 
		<if test='_parameter!=null and _parameter!=""'>where deptno = #{deptno}</if>	
	</select>
	<select id="findBySalary" parameterType="com.huawei.it.entity.Emp" resultType="com.huawei.it.entity.Emp">
		select * from emp
		<choose>
			<when test="sal>3000">
				where sal>#{sal}
			</when>
			<otherwise>
				where sal >=3000
			</otherwise>
		</choose>
	</select>
<!-- 	where元素主要是用于简化查询语句中where部分的条件判断。where元素可以在<where>元素所在位置输出1个where关键字，
而且还可以将后面条件多余的and或or关键字去除 -->
	<select id="findByDeptAndSalary" parameterType="com.huawei.it.entity.Condition" resultType="com.huawei.it.entity.Emp">
		select * from emp
		<where>
			<if test="deptno!=null">and deptno=#{deptno}</if>
			<if test="salary"> and sal>#{salary}</if>
		</where>
	</select>
<!-- 	set元素主要用在更新操作的时候，他的主要功能和where元素相似，主要实在<set>元素所在位置输出1个set关键字，而且还可以去除
		内容结尾中无关的逗号。有了set元素我们就可以动态的更新那些修改了的字段
 -->
	<update id="updateByDeptno" parameterType="com.huawei.it.entity.Emp">
		update temp_emp
		<set>
		<if test="job!=null">job=#{job},</if>
		<if test="sal!=null">sal=#{sal},</if>
		</set>
		where empno=#{empno}
	</update>
<!-- trim元素可以在包含的内容前加上某些前缀，也可以在其后加上某些后缀，与之对应的属性是prefix和suffix
	可以把包含内容的首部某些内容过滤，即忽略，也可以把尾部的某些内容过滤，对应的属性是prefixOverrides和suffixOverrides;
	
 -->
 	<select id="findByDeptnoAndEname" parameterType="com.huawei.it.entity.Condition" resultType="com.huawei.it.entity.Emp">
 		select * from emp
 		<trim prefix="where" prefixOverrides="and">
 			<if test="deptno!=null">and deptno=#{deptno}</if>
 			<if test="salary!=null">and sal=#{salary}</if>
 		</trim>
 		
 	</select>
 
<!--  foreach实现了循环逻辑，可以进行一个集合的迭代，主要用在in条件中。foreach使用示例如下
		<select>
		select * from emp where ename in
		<foreach collection="集合" item="迭代变量" open="(" separator="," close=")">
		#{迭代变量}
		</foreach>
 -->
<!--  foreach的主要用在构建in条件中，它可以在SQL语句中进行迭代一个集合。
foreach元素的属性主要有item，index，collection，open，separator，close。
item表示集合中每一个元素进行迭代时的别名，
index指定一个名字，用于表示在迭代过程中，每次迭代到的位置，
open表示该语句以什么开始，
separator表示在每次进行迭代之间以什么符号作为分隔符，
close表示以什么结束，
collection属性是在使用foreach的时候最关键的也是最容易出错的，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况： 
（1）如果传入的是单参数且参数类型是一个List的时候，collection属性值为list .
（2）如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array .
（3）如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key. -->
 	<select id="findByIds" parameterType="java.util.List" resultType="com.huawei.it.entity.Emp">
 		select * from emp where empno in
 		<foreach collection="list" open="(" close=")" separator="," item="id">
 			#{id}
 		</foreach>
 	</select>
 
</mapper>